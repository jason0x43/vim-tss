*vim-tss.txt* TypeScript language services integration for Neovim

==============================================================================
CONTENTS                                                    *vim-tss-contents*

    1. Introduction ............................... |vim-tss-introduction|
    2. Commands ....................................... |vim-tss-commands|
    3. Configuration ............................. |vim-tss-configuration|
    4. Extras ........................................... |vim-tss-extras|

==============================================================================
1. Introduction                                         *vim-tss-introduction*

This plugin provides a means for starting an instance of tsserver and
interacting with it in Vim. Individual TS commands such as 'format' or
'rename' are implemented as standalone command line scripts. This allows Vim
to make use of the efficiency gains of tsserver without requiring complex Vim
scripts.

==============================================================================
2. Commands                                                 *vim-tss-commands*

                                                              *:TssDefinition*
:TssDefinition          Get the definition for the symbol under the cursor.

                                                                  *:TssErrors*
:TssErrors              Get errors for the current file. If any errors exist,
                        the quickfix window will be displayed.

                                                                  *:TssFormat*
:TssFormat              Format the current file. Formatting options my be
                        set in a "formatCodeOptions" property in the project
                        tsconfig.json or jsconfig.json file.

                                                          *:TssImplementation*
:TssImplementation      Get locations where the symbol under the cursor is
                        implemented and jump to the first one. The buffer's
                        location list will be populated with the locations.

                                                               *:TssQuickInfo*
:TssQuickInfo           Display summary information about the symbol under the
                        cursor.

                                                              *:TssReferences*
:TssReferences          Get locations where the symbol under the cursor is
                        referenced and jump to the first one. The buffer's
                        location list will be populated with the locations.

                                                          *:TssReloadProjects*
:TssReloadProjects      Tell tsserver to reload the project structure for all
                        currently opened files.

                                                                  *:TssRename*
:TssRename [flags]      Rename the symbol under the cursor everywhere it occurs
                        the current file. The command accepts an optional
                        'flags' argument. This is a single string that may
                        contain the characters 'p', 'c', and 's' in any order.
                        The 'p' flag indicates that the rename operation
                        should be project-wide. The 'c' and 's' flags indicate
                        that the symbol should be renamed in comments and/or
                        strings as well as code.

                                                                   *:TssStart*
:TssStart               Start a tsserver instance for the project of the
                        currently open file. This command has no effect if a
                        server is already running.

                                                                    *:TssStop*
:TssStop                Stop the tsserver instance for the project of the
                        currently open file.

==============================================================================
3. Configuration                                       *vim-tss-configuration*

By default, the vim-tss will automatically start a tsserver instance when a
TypeScript or JavaScript file is opened.

GLOBAL OPTIONS                                               *vim-tss-options*

*g:tss_auto_open_loclist*       If 1, automatically open the location list
                              when something populates it.
                              (default) 0

*g:tss_completion_ignore_case*  If 1, ignore text case when finding completion
                              matches.
                              (default) 0

*g:tss_debug_tsserver*          If 1, load the tsserver process in debug mode.
                              This will allow a Chrome DevTools debugger to
                              attach to the running tsserver process.
                              (default) 0

*g:tss_format_on_save*          If 1, |:TssFormat| will be run on the current
                              TypeScript file (or JavaScript file, if
                              |g:tss_js|=1) every time a TypeScript file is
                              saved.
                              (default) 0

*g:tss_js*                      If 1, JavaScript vim-tss will be enabled for
                              JavaScript files.
                              (default) 1

*g:tss_verbose*                 If 1, debug messages will be logged.
                              (default) 0

==============================================================================
4. Extras                                                     *vim-tss-extras*

NEOMAKE                                                      *vim-tss-neomake*

The plugin overrides Neomake's default 'tsc' make for TypeScript files with one
that uses the TS language services syntactic and semantic error commands. This
allows Neomake to display errors almost instantaneously even for large
projects. The plugin also sets up a 'tss' maker for JavaScript files and makes
it and 'jshint' the default makers.

FZF                                                              *vim-tss-fzf*

The tss#tags function can be used for quick tag searching with fzf. For
example: >

    " Tell fzf to display tags for the current module
    function! s:ts_tags()
        call fzf#run({
            \ 'options': '-s -d "\t" --with-nth 4,1 -n 1 --tiebreak=index',
            \ 'source': tss#tags(),
            \ 'sink': function('s:tags_sink'),
            \ 'down': '20%'
            \ })
    endfunction

    " Process a tag line when the user selects it
    function! s:tags_sink(line)
        execute split(a:line, "\t")[2]
    endfunction

    " Bind the call to a globally accessible command
    command! TsTags call s:ts_tags()

    " Create a mapping for quick access to the command
    map <silent> <Leader>t :TsTags<CR>
>

vim:et ft=help tw=78 isk+=<,>,\
